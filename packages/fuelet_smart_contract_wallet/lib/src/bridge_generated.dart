// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

abstract class FueletSmartContractWallet {
  Future<SmartContractWallet> connectStaticMethodSmartContractWallet({required String r1PublicKey, required String recoveryPrivateKey, required String nodeUrl, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectStaticMethodSmartContractWalletConstMeta;

  Future<void> deployContractMethodSmartContractWallet({required SmartContractWallet that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeployContractMethodSmartContractWalletConstMeta;

  Future<
      (
        Uint8List,
        Uint8List
      )> genTransferTxRequestMethodSmartContractWallet({required SmartContractWallet that, required String toB256, required int amount, required String asset, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenTransferTxRequestMethodSmartContractWalletConstMeta;

  Future<String> sendTxMethodSmartContractWallet({required SmartContractWallet that, required Uint8List encodedTx, required Uint8List signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendTxMethodSmartContractWalletConstMeta;
}

class SmartContractWallet {
  final FueletSmartContractWallet bridge;
  final String bech32Address;
  final String r1PublicKey;
  final String contractId;
  final String recoveryPrivateKey;
  final String nodeUrl;

  const SmartContractWallet({
    required this.bridge,
    required this.bech32Address,
    required this.r1PublicKey,
    required this.contractId,
    required this.recoveryPrivateKey,
    required this.nodeUrl,
  });

  static Future<SmartContractWallet> connect({required FueletSmartContractWallet bridge, required String r1PublicKey, required String recoveryPrivateKey, required String nodeUrl, dynamic hint}) => bridge.connectStaticMethodSmartContractWallet(r1PublicKey: r1PublicKey, recoveryPrivateKey: recoveryPrivateKey, nodeUrl: nodeUrl, hint: hint);

  Future<void> deployContract({dynamic hint}) => bridge.deployContractMethodSmartContractWallet(
        that: this,
      );

  Future<
      (
        Uint8List,
        Uint8List
      )> genTransferTxRequest({required String toB256, required int amount, required String asset, dynamic hint}) => bridge
          .genTransferTxRequestMethodSmartContractWallet(
        that: this,
        toB256: toB256,
        amount: amount,
        asset: asset,
      );

  Future<String> sendTx({required Uint8List encodedTx, required Uint8List signature, dynamic hint}) => bridge.sendTxMethodSmartContractWallet(
        that: this,
        encodedTx: encodedTx,
        signature: signature,
      );
}

class FueletSmartContractWalletImpl implements FueletSmartContractWallet {
  final FueletSmartContractWalletPlatform _platform;
  factory FueletSmartContractWalletImpl(ExternalLibrary dylib) => FueletSmartContractWalletImpl.raw(FueletSmartContractWalletPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory FueletSmartContractWalletImpl.wasm(FutureOr<WasmModule> module) => FueletSmartContractWalletImpl(module as ExternalLibrary);
  FueletSmartContractWalletImpl.raw(this._platform);
  Future<SmartContractWallet> connectStaticMethodSmartContractWallet({required String r1PublicKey, required String recoveryPrivateKey, required String nodeUrl, dynamic hint}) {
    var arg0 = _platform.api2wire_String(r1PublicKey);
    var arg1 = _platform.api2wire_String(recoveryPrivateKey);
    var arg2 = _platform.api2wire_String(nodeUrl);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect__static_method__SmartContractWallet(port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_smart_contract_wallet(d),
      parseErrorData: null,
      constMeta: kConnectStaticMethodSmartContractWalletConstMeta,
      argValues: [
        r1PublicKey,
        recoveryPrivateKey,
        nodeUrl
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectStaticMethodSmartContractWalletConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "connect__static_method__SmartContractWallet",
        argNames: [
          "r1PublicKey",
          "recoveryPrivateKey",
          "nodeUrl"
        ],
      );

  Future<void> deployContractMethodSmartContractWallet({required SmartContractWallet that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_smart_contract_wallet(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_deploy_contract__method__SmartContractWallet(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kDeployContractMethodSmartContractWalletConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeployContractMethodSmartContractWalletConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "deploy_contract__method__SmartContractWallet",
        argNames: [
          "that"
        ],
      );

  Future<
      (
        Uint8List,
        Uint8List
      )> genTransferTxRequestMethodSmartContractWallet({required SmartContractWallet that, required String toB256, required int amount, required String asset, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_smart_contract_wallet(that);
    var arg1 = _platform.api2wire_String(toB256);
    var arg2 = _platform.api2wire_u64(amount);
    var arg3 = _platform.api2wire_String(asset);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_gen_transfer_tx_request__method__SmartContractWallet(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api___record__uint_8_list_uint_8_list,
      parseErrorData: null,
      constMeta: kGenTransferTxRequestMethodSmartContractWalletConstMeta,
      argValues: [
        that,
        toB256,
        amount,
        asset
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGenTransferTxRequestMethodSmartContractWalletConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "gen_transfer_tx_request__method__SmartContractWallet",
        argNames: [
          "that",
          "toB256",
          "amount",
          "asset"
        ],
      );

  Future<String> sendTxMethodSmartContractWallet({required SmartContractWallet that, required Uint8List encodedTx, required Uint8List signature, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_smart_contract_wallet(that);
    var arg1 = _platform.api2wire_uint_8_list(encodedTx);
    var arg2 = _platform.api2wire_uint_8_list(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_tx__method__SmartContractWallet(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kSendTxMethodSmartContractWalletConstMeta,
      argValues: [
        that,
        encodedTx,
        signature
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendTxMethodSmartContractWalletConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_tx__method__SmartContractWallet",
        argNames: [
          "that",
          "encodedTx",
          "signature"
        ],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  (
    Uint8List,
    Uint8List
  ) _wire2api___record__uint_8_list_uint_8_list(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_uint_8_list(arr[0]),
      _wire2api_uint_8_list(arr[1]),
    );
  }

  SmartContractWallet _wire2api_smart_contract_wallet(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return SmartContractWallet(
      bridge: this,
      bech32Address: _wire2api_String(arr[0]),
      r1PublicKey: _wire2api_String(arr[1]),
      contractId: _wire2api_String(arr[2]),
      recoveryPrivateKey: _wire2api_String(arr[3]),
      nodeUrl: _wire2api_String(arr[4]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
