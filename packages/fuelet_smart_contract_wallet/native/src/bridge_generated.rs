#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_connect__static_method__SmartContractWallet_impl(
    port_: MessagePort,
    r1_public_key: impl Wire2Api<String> + UnwindSafe,
    recovery_private_key: impl Wire2Api<String> + UnwindSafe,
    node_url: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, SmartContractWallet, _>(
        WrapInfo {
            debug_name: "connect__static_method__SmartContractWallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_r1_public_key = r1_public_key.wire2api();
            let api_recovery_private_key = recovery_private_key.wire2api();
            let api_node_url = node_url.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(SmartContractWallet::connect(
                    api_r1_public_key,
                    api_recovery_private_key,
                    api_node_url,
                ))
            }
        },
    )
}
fn wire_deploy_contract__method__SmartContractWallet_impl(
    port_: MessagePort,
    that: impl Wire2Api<SmartContractWallet> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "deploy_contract__method__SmartContractWallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(SmartContractWallet::deploy_contract(&api_that))
            }
        },
    )
}
fn wire_gen_transfer_tx_request__method__SmartContractWallet_impl(
    port_: MessagePort,
    that: impl Wire2Api<SmartContractWallet> + UnwindSafe,
    to_b256: impl Wire2Api<String> + UnwindSafe,
    amount: impl Wire2Api<u64> + UnwindSafe,
    asset: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (Vec<u8>, Vec<u8>), _>(
        WrapInfo {
            debug_name: "gen_transfer_tx_request__method__SmartContractWallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_to_b256 = to_b256.wire2api();
            let api_amount = amount.wire2api();
            let api_asset = asset.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(SmartContractWallet::gen_transfer_tx_request(
                    &api_that,
                    api_to_b256,
                    api_amount,
                    api_asset,
                ))
            }
        },
    )
}
fn wire_send_tx__method__SmartContractWallet_impl(
    port_: MessagePort,
    that: impl Wire2Api<SmartContractWallet> + UnwindSafe,
    encoded_tx: impl Wire2Api<Vec<u8>> + UnwindSafe,
    signature: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "send_tx__method__SmartContractWallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_encoded_tx = encoded_tx.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(SmartContractWallet::send_tx(
                    &api_that,
                    api_encoded_tx,
                    api_signature,
                ))
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for SmartContractWallet {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.bech32_address.into_into_dart().into_dart(),
            self.r1_public_key.into_into_dart().into_dart(),
            self.recovery_private_key.into_into_dart().into_dart(),
            self.node_url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SmartContractWallet {}
impl rust2dart::IntoIntoDart<SmartContractWallet> for SmartContractWallet {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_connect__static_method__SmartContractWallet(
        port_: MessagePort,
        r1_public_key: String,
        recovery_private_key: String,
        node_url: String,
    ) {
        wire_connect__static_method__SmartContractWallet_impl(
            port_,
            r1_public_key,
            recovery_private_key,
            node_url,
        )
    }

    #[wasm_bindgen]
    pub fn wire_deploy_contract__method__SmartContractWallet(port_: MessagePort, that: JsValue) {
        wire_deploy_contract__method__SmartContractWallet_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_gen_transfer_tx_request__method__SmartContractWallet(
        port_: MessagePort,
        that: JsValue,
        to_b256: String,
        amount: u64,
        asset: String,
    ) {
        wire_gen_transfer_tx_request__method__SmartContractWallet_impl(
            port_, that, to_b256, amount, asset,
        )
    }

    #[wasm_bindgen]
    pub fn wire_send_tx__method__SmartContractWallet(
        port_: MessagePort,
        that: JsValue,
        encoded_tx: Box<[u8]>,
        signature: Box<[u8]>,
    ) {
        wire_send_tx__method__SmartContractWallet_impl(port_, that, encoded_tx, signature)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<SmartContractWallet> for JsValue {
        fn wire2api(self) -> SmartContractWallet {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                4,
                "Expected 4 elements, got {}",
                self_.length()
            );
            SmartContractWallet {
                bech32_address: self_.get(0).wire2api(),
                r1_public_key: self_.get(1).wire2api(),
                recovery_private_key: self_.get(2).wire2api(),
                node_url: self_.get(3).wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl<T> Wire2Api<Option<T>> for JsValue
    where
        JsValue: Wire2Api<T>,
    {
        fn wire2api(self) -> Option<T> {
            (!self.is_null() && !self.is_undefined()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<u64> for JsValue {
        fn wire2api(self) -> u64 {
            ::std::convert::TryInto::try_into(self.dyn_into::<js_sys::BigInt>().unwrap()).unwrap()
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use self::web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_connect__static_method__SmartContractWallet(
        port_: i64,
        r1_public_key: *mut wire_uint_8_list,
        recovery_private_key: *mut wire_uint_8_list,
        node_url: *mut wire_uint_8_list,
    ) {
        wire_connect__static_method__SmartContractWallet_impl(
            port_,
            r1_public_key,
            recovery_private_key,
            node_url,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_deploy_contract__method__SmartContractWallet(
        port_: i64,
        that: *mut wire_SmartContractWallet,
    ) {
        wire_deploy_contract__method__SmartContractWallet_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_gen_transfer_tx_request__method__SmartContractWallet(
        port_: i64,
        that: *mut wire_SmartContractWallet,
        to_b256: *mut wire_uint_8_list,
        amount: u64,
        asset: *mut wire_uint_8_list,
    ) {
        wire_gen_transfer_tx_request__method__SmartContractWallet_impl(
            port_, that, to_b256, amount, asset,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_send_tx__method__SmartContractWallet(
        port_: i64,
        that: *mut wire_SmartContractWallet,
        encoded_tx: *mut wire_uint_8_list,
        signature: *mut wire_uint_8_list,
    ) {
        wire_send_tx__method__SmartContractWallet_impl(port_, that, encoded_tx, signature)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_smart_contract_wallet_0() -> *mut wire_SmartContractWallet {
        support::new_leak_box_ptr(wire_SmartContractWallet::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<SmartContractWallet> for *mut wire_SmartContractWallet {
        fn wire2api(self) -> SmartContractWallet {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<SmartContractWallet>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<SmartContractWallet> for wire_SmartContractWallet {
        fn wire2api(self) -> SmartContractWallet {
            SmartContractWallet {
                bech32_address: self.bech32_address.wire2api(),
                r1_public_key: self.r1_public_key.wire2api(),
                recovery_private_key: self.recovery_private_key.wire2api(),
                node_url: self.node_url.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_SmartContractWallet {
        bech32_address: *mut wire_uint_8_list,
        r1_public_key: *mut wire_uint_8_list,
        recovery_private_key: *mut wire_uint_8_list,
        node_url: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_SmartContractWallet {
        fn new_with_null_ptr() -> Self {
            Self {
                bech32_address: core::ptr::null_mut(),
                r1_public_key: core::ptr::null_mut(),
                recovery_private_key: core::ptr::null_mut(),
                node_url: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_SmartContractWallet {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use self::io::*;
